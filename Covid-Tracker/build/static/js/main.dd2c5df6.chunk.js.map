{"version":3,"sources":["Table.js","InfoBox.js","utils.js","Map.js","LineGraph.js","App.js","index.js"],"names":["Table","countries","className","map","country","numeral","cases","format","InfoBox","title","total","isRed","active","props","Card","onClick","CardContent","Typography","color","caseTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","caseType","console","log","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","prettyPrintStat","stat","Map","zoom","MapContainer","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCaseType","name","iso2","getCountriesData","onCounrtyChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Button","window","location","href","margin","ReactDOM","render","document","getElementById"],"mappings":"0WAoBeA,G,OAjBD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACb,OACI,qBAAKC,UAAU,QAAf,SAEQD,EAAUE,KAAI,SAAAC,GAAO,OACjB,+BACI,6BAAKA,EAAQA,UACb,6BACI,iCAASC,IAAQD,EAAQE,OAAOC,OAAO,sB,0BCcpDC,EAtBC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOH,EAA4C,EAA5CA,MAAOI,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAWC,EAAY,0DAClE,OACI,cAACC,EAAA,EAAD,CAAMC,QAASF,EAAME,QAASb,UAAS,kBAAaU,GAAU,oBAAvB,YAA8CD,GAAS,gBAA9F,SACI,eAACK,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBhB,UAAU,iBAA5C,SACKO,IAIL,oBAAIP,UAAS,0BAAqBS,GAAS,yBAA3C,SAAuEL,IAGvE,eAACW,EAAA,EAAD,CAAYf,UAAU,iBAAtB,UACKQ,EADL,kB,qDCZVS,EAAiB,CACnBb,MAAO,CACHc,IAAK,UACLC,WAAY,KAEhBC,UAAW,CACPF,IAAK,UACLC,WAAY,KAEhBE,OAAQ,CACJH,IAAK,UACLC,WAAY,MAGPG,EAAW,SAACC,GACrB,IAAMC,EAAU,YAAOD,GAQvB,OAPAC,EAAWC,MAAK,SAACC,EAAGC,GAChB,OAAGD,EAAEtB,MAAQuB,EAAEvB,OACH,EAED,KAGRoB,GAGEI,EAAgB,SAACL,GAA4B,IAAtBM,EAAqB,uDAAZ,QAEzC,OADAC,QAAQC,IAAIF,GAERN,EAAKtB,KAAI,SAAAC,GAAO,OACZ,cAAC8B,EAAA,EAAD,CACIC,OAAQ,CAAC/B,EAAQgC,YAAYC,IAAKjC,EAAQgC,YAAYE,MACtDpB,MAAOC,EAAeY,GAAUX,IAChCmB,UAAWpB,EAAeY,GAAUX,IACpCoB,YAAa,GACbC,OACIC,KAAKC,KAAKvC,EAAQ2B,IAAaZ,EAAeY,GAAUV,WANhE,SASI,cAACuB,EAAA,EAAD,UACI,sBAAK1C,UAAU,iBAAf,UACI,qBAAKA,UAAU,YAAY2C,MAAO,CAACC,gBAAgB,OAAD,OAAS1C,EAAQgC,YAAYW,KAA7B,QAClD,qBAAK7C,UAAU,YAAf,SAA4BE,EAAQA,UACpC,sBAAKF,UAAU,iBAAf,oBAAwCG,IAAQD,EAAQE,OAAOC,OAAO,UACtE,sBAAKL,UAAU,iBAAf,wBAA4CG,IAAQD,EAAQkB,WAAWf,OAAO,UAC9E,sBAAKL,UAAU,cAAf,qBAAsCG,IAAQD,EAAQmB,QAAQhB,OAAO,qBAShFyC,EAAkB,SAAAC,GAAI,OAC/BA,EAAI,WAAO5C,IAAQ4C,GAAM1C,OAAO,SAAW,MCtChC2C,EAjBH,SAAC,GAAyC,IAAxCjD,EAAuC,EAAvCA,UAAW8B,EAA4B,EAA5BA,SAAUI,EAAkB,EAAlBA,OAAQgB,EAAU,EAAVA,KAEvC,OADAnB,QAAQC,IAAIF,GAER,qBAAK7B,UAAU,MAAf,SACI,eAACkD,EAAA,EAAD,CAAcjB,OAAQA,EAAQgB,KAAMA,EAApC,UACI,cAACE,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAGZzB,EAAc7B,EAAW8B,S,QCXvCyB,EAAU,CACZC,OAAQ,CACJC,SAAQ,GAEZC,SAAU,CACNC,MAAO,CACHnB,OAAQ,IAGhBoB,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAASC,EAAa1C,GACzB,OAAOpB,IAAQ8D,EAAYC,OAAO7D,OAAO,WAIrD8D,OAAQ,CACJC,MAAM,CACF,CACIC,KAAM,OACNC,KAAM,CACFjE,OAAQ,WACRkE,cAAe,QAI3BC,MAAO,CACH,CACIC,UAAW,CACPjB,SAAS,GAEbkB,MAAO,CACHC,SAAU,SAAST,EAAOU,EAAOC,GAC7B,OAAO1E,IAAQ+D,GAAO7D,OAAO,YA0DtCyE,EAnDG,SAAC,GAAyB,IAAD,IAAvBjD,gBAAuB,MAAb,QAAa,IACfkD,mBAAS,IADM,mBAChCxD,EADgC,KAC1ByD,EAD0B,KAEjCC,EAAiB,SAAC1D,GAA4B,IAE5C2D,EAFsBrD,EAAqB,uDAAZ,QAC7BsD,EAAY,GAElB,IAAI,IAAIC,KAAQ7D,EAAKnB,MAAO,CACxB,GAAG8E,EAAe,CACd,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAGhE,EAAKM,GAAUuD,GAAQF,GAE9BC,EAAUK,KAAKH,GAEnBH,EAAgB3D,EAAKM,GAAUuD,GAEnC,OAAOD,GAgBX,OAbAM,qBAAU,YACS,uCAAG,sBAAA/D,EAAA,sEACRgE,MAAM,8DACXC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAApE,GACF,IAAM4D,EAAYF,EAAe1D,EAAMM,GACvCmD,EAAQG,MAPE,2CAAH,qDAUfW,KACD,CAACjE,IAEA,qBAAK7B,UAAU,aAAf,UAEY,OAAJuB,QAAI,IAAJA,OAAA,EAAAA,EAAMwE,QAAS,GACX,cAAC,OAAD,CACIzC,QAASA,EACT/B,KAAM,CACFyE,SAAU,CAAC,CACPzE,KAAKA,EACL0E,gBAAiB,yBACjBC,YAAa,kBCoB9BC,G,OAlGH,WAAO,IAAD,EACoBpB,mBAAS,IAD7B,mBACPhF,EADO,KACIqG,EADJ,OAEgBrB,mBAAS,aAFzB,mBAEP7E,EAFO,KAEEmG,EAFF,OAGwBtB,mBAAS,IAHjC,mBAGP7C,EAHO,KAGMoE,EAHN,OAIoBvB,mBAAS,IAJ7B,mBAIPwB,EAJO,KAIIC,EAJJ,OAKoBzB,mBAAS,CAAC5C,IAAK,SAAUsE,KAAM,UALnD,mBAKPC,EALO,KAKIC,EALJ,OAMgB5B,mBAAS,GANzB,mBAMP6B,EANO,KAMEC,EANF,OAO0B9B,mBAAS,IAPnC,mBAOP+B,EAPO,KAOOC,EAPP,OAQkBhC,mBAAS,SAR3B,mBAQPlD,EARO,KAQGmF,EARH,KASdvB,qBAAU,WACNC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApE,GACF+E,EAAe/E,QAEpB,CAACM,IAEJ4D,qBAAU,YACgB,uCAAG,sBAAA/D,EAAA,sEACfgE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpE,GACH,IAAMxB,EAAYwB,EAAKtB,KAAI,SAACC,GAAD,MACvB,CACI+G,KAAM/G,EAAQA,QACdgE,MAAOhE,EAAQgC,YAAYgF,SAGzB1F,EAAaF,EAASC,GAC5BiF,EAAahF,GACb4E,EAAarG,GACbgH,EAAgBxF,MAbH,2CAAH,qDAgBlB4F,KACD,IACP,IAAMC,EAAe,uCAAG,WAAMC,GAAN,iBAAA3F,EAAA,6DACd4F,EAAcD,EAAEE,OAAOrD,MACvBd,EAAsB,cAAhBkE,EACN,qCADM,mDAEsCA,GAJ9B,SAKV5B,MAAMtC,GACXuC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApE,GACF+E,EAAe/E,GACf8E,EAAWiB,GACXX,EAAa,CAACpF,EAAKW,YAAYC,IAAIZ,EAAKW,YAAYE,OACpDyE,EAAW,MAXC,2CAAH,sDAejB,OACA,sBAAK7G,UAAU,UAAf,UACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,cAAf,UACI,kDACA,cAACwH,EAAA,EAAD,CAAaxH,UAAU,gBAAvB,SACI,eAACyH,EAAA,EAAD,CACIC,QAAQ,WACRxD,MAAOhE,EACPyH,SAAUP,EAHd,UAKI,cAACQ,EAAA,EAAD,CAAU1D,MAAM,YAAhB,uBAEInE,EAAUE,KAAI,SAAAC,GAAO,OACjB,cAAC0H,EAAA,EAAD,CAAU1D,MAAOhE,EAAQgE,MAAzB,SAAiChE,EAAQ+G,kBAO7D,sBAAKjH,UAAU,aAAf,UACI,cAAC,EAAD,CAASS,OAAK,EAACC,OAAqB,UAAbmB,EAAsBhB,QAAS,SAACwG,GAAD,OAAOL,EAAY,UAAUzG,MAAM,oBAAoBH,MAAO0C,EAAgBZ,EAAY2F,YAAarH,MAAOsC,EAAgBZ,EAAY9B,SAChM,cAAC,EAAD,CAASM,OAAqB,cAAbmB,EAA0BhB,QAAS,SAACwG,GAAD,OAAOL,EAAY,cAAczG,MAAM,YAAYH,MAAO0C,EAAgBZ,EAAY4F,gBAAiBtH,MAAOsC,EAAgBZ,EAAYd,aAC9L,cAAC,EAAD,CAASX,OAAK,EAACC,OAAqB,WAAbmB,EAAuBhB,QAAS,SAACwG,GAAD,OAAOL,EAAY,WAAWzG,MAAM,SAASH,MAAO0C,EAAgBZ,EAAY6F,aAAcvH,MAAOsC,EAAgBZ,EAAYb,aAE5L,cAAC,EAAD,CAAKQ,SAAUA,EAAU9B,UAAW+G,EAAc7E,OAAQyE,EAAWzD,KAAM2D,OAE/E,cAAChG,EAAA,EAAD,CAAMZ,UAAU,aAAhB,SACI,eAACc,EAAA,EAAD,WACI,uDACA,cAAC,EAAD,CAAOf,UAAWwG,IAClB,qBAAIvG,UAAU,kBAAd,2BAA+C6B,KAC/C,cAAC,EAAD,CAAWA,SAAUA,YAIjC,sBAAK7B,UAAU,cAAf,UACQ,8CACA,cAACgI,EAAA,EAAD,CAAQnH,QAAS,kBAAMoH,OAAOC,SAASC,KAAM,6EAA6ExF,MAAO,CAACsD,gBAAiB,UAAWmC,OAAQ,QAAtK,gC,OChGpBC,IAASC,OACT,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.dd2c5df6.chunk.js","sourcesContent":["import numeral from 'numeral'\r\nimport React from 'react'\r\nimport './Table.css'\r\nconst Table = ({ countries }) => {\r\n    return (\r\n        <div className='table'  >\r\n            {\r\n                countries.map(country => (\r\n                    <tr>\r\n                        <td>{country.country}</td>\r\n                        <td>\r\n                            <strong>{numeral(country.cases).format('+0,0')}</strong>\r\n                        </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport './InfoBox.css'\r\nimport { Card, CardContent, Typography} from '@material-ui/core'\r\nconst InfoBox = ({ title, cases, total, isRed, active, ...props }) => {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography color='textSecondary' className='infoBox__title'>\r\n                    {title}\r\n                </Typography>\r\n\r\n                {/* Number of Cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                {/* Total */}\r\n                <Typography className='infoBox__total'>\r\n                    {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nconst caseTypeColors = {\r\n    cases: {\r\n        hex: '#cc1034',\r\n        multiplier: 200\r\n    },\r\n    recovered: {\r\n        hex: '#7dd71d',\r\n        multiplier: 200\r\n    },\r\n    deaths: {\r\n        hex: '#fb4443',\r\n        multiplier: 400\r\n    },\r\n}\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if(a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n}\r\n//Circle on Map\r\nexport const showDataOnMap = (data, caseType=\"cases\") => {\r\n    console.log(caseType);\r\n    return (\r\n        data.map(country => (\r\n            <Circle\r\n                center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                color={caseTypeColors[caseType].hex}\r\n                fillColor={caseTypeColors[caseType].hex}\r\n                fillOpacity={0.4}\r\n                radius={\r\n                    Math.sqrt(country[caseType]) * caseTypeColors[caseType].multiplier\r\n                }\r\n            >\r\n                <Popup >\r\n                    <div className='info-container'>\r\n                        <div className='info-flag' style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n                        <div className='info-name'>{country.country}</div>\r\n                        <div className='info-confirmed'>Cases: {numeral(country.cases).format('0.0')}</div>\r\n                        <div className='info-recovered'>Recovered: {numeral(country.recovered).format('0.0')}</div>\r\n                        <div className='info-deaths'>Deaths: {numeral(country.deaths).format('0.0')}</div>\r\n                    </div>\r\n                </Popup>\r\n            </Circle>\r\n        ))\r\n    )\r\n} \r\n    \r\n\r\nexport const prettyPrintStat = stat => (\r\n    stat ? `+${numeral(stat).format('0.0a')}`: \"+0\"\r\n)","import React from 'react'\r\nimport './Map.css'\r\nimport { MapContainer, TileLayer } from 'react-leaflet'\r\nimport { showDataOnMap } from './utils'\r\nconst Map = ({countries, caseType, center, zoom}) => { \r\n    console.log(caseType)\r\n    return (\r\n        <div className='map'>\r\n            <MapContainer center={center} zoom={zoom}>\r\n                <TileLayer \r\n                    url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {\r\n                    showDataOnMap(countries, caseType)\r\n                }\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map   \r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nconst options = {\r\n    legend: {\r\n        display:false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format('+0,0');\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes:[\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: 'MM/DD/YY',\r\n                    tooltipFormat: 'll'\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value, index, values) {\r\n                        return numeral(value).format('0a')\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\nconst LineGraph = ({caseType= 'cases'}) => {\r\n    const [data, setData] = useState({})\r\n    const buildChartData = (data, caseType='cases') => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for(let date in data.cases) {\r\n            if(lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[caseType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            } \r\n            lastDataPoint = data[caseType][date];\r\n        }\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                const chartData = buildChartData(data, caseType);\r\n                setData(chartData);\r\n            })\r\n        }\r\n        fetchData();\r\n    }, [caseType])\r\n    return (\r\n        <div className='app__graph'>\r\n            {\r\n                data?.length > 0 && (\r\n                    <Line\r\n                        options={options}\r\n                        data={{\r\n                            datasets: [{\r\n                                data:data,\r\n                                backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n                                borderColor: '#cc1034'\r\n                            }]\r\n                        }}\r\n                    /> \r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react'\r\nimport { FormControl, MenuItem, Select, Card, CardContent, Button } from '@material-ui/core'\r\nimport './App.css'\r\nimport Table from './Table'\r\nimport InfoBox from './InfoBox'\r\nimport Map from './Map'\r\nimport {prettyPrintStat, sortData} from './utils'\r\nimport LineGraph from './LineGraph'\r\nimport 'leaflet/dist/leaflet.css'\r\nconst App = () => {\r\n    const [countries, setCountries] = useState([])\r\n    const [country, setCountry] = useState('worldwide');\r\n    const [countryInfo, setCountryInfo] = useState({});\r\n    const [tableData, setTableData] = useState([])\r\n    const [mapCenter, setMapCenter] = useState({lat: 17.80746, lng: -88.4796})\r\n    const [mapZoom, setMapZoom] = useState(4)\r\n    const [mapCountries, setMapCountries] = useState([])\r\n    const [caseType, setCaseType] = useState(\"cases\")\r\n    useEffect(() => {\r\n        fetch('https://disease.sh/v3/covid-19/all')\r\n        .then(response => response.json())\r\n        .then(data => { \r\n            setCountryInfo(data);\r\n        })\r\n    }, [caseType])\r\n    \r\n    useEffect(() => {\r\n        const getCountriesData = async() => {\r\n            await fetch('https://disease.sh/v3/covid-19/countries')\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const countries = data.map((country) => (\r\n                    {\r\n                        name: country.country, //United State\r\n                        value: country.countryInfo.iso2, // UK, US\r\n                    }\r\n                    ))\r\n                    const sortedData = sortData(data);\r\n                    setTableData(sortedData)\r\n                    setCountries(countries);\r\n                    setMapCountries(data);\r\n                });\r\n            };\r\n            getCountriesData();\r\n        }, [])\r\n    const onCounrtyChange = async(e) => {\r\n        const countryCode = e.target.value;\r\n        const url = countryCode === 'worldwide' \r\n            ? 'https://disease.sh/v3/covid-19/all' \r\n            : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n            await fetch(url) \r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCountryInfo(data);\r\n                setCountry(countryCode);\r\n                setMapCenter([data.countryInfo.lat,data.countryInfo.long]) \r\n                setMapZoom(7);\r\n                    \r\n            })\r\n    }\r\n        return (\r\n        <div className=\"fullapp\">\r\n            <div className=\"app\">\r\n                <div className=\"app__left\">\r\n                    <div className=\"app__header\">\r\n                        <h1>COVID 19 TRACKER</h1>\r\n                        <FormControl className='app__dropdown'>\r\n                            <Select \r\n                                variant='outlined'\r\n                                value={country}\r\n                                onChange={onCounrtyChange}\r\n                            >\r\n                                <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n                                {\r\n                                    countries.map(country => (\r\n                                        <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                                    ))\r\n                                }\r\n                                \r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"app__stats\">\r\n                        <InfoBox isRed active={caseType === 'cases'} onClick={(e) => setCaseType(\"cases\")} title='Coronavirus Cases' cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\r\n                        <InfoBox active={caseType === 'recovered'} onClick={(e) => setCaseType(\"recovered\")} title='Recovered' cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\r\n                        <InfoBox isRed active={caseType === 'deaths'} onClick={(e) => setCaseType(\"deaths\")} title='Deaths' cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\r\n                    </div>\r\n                    <Map caseType={caseType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\r\n                </div>\r\n                <Card className='app__right'>\r\n                    <CardContent>\r\n                        <h3>Live Cases by Country</h3>\r\n                        <Table countries={tableData}/>\r\n                        <h3 className='app__graphTitle'>Worldwide new {caseType}</h3>\r\n                        <LineGraph caseType={caseType}/>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n            <div className=\"app__bottom\">\r\n                    <h2>Get The Code</h2>\r\n                    <Button onClick={() => window.location.href= 'https://github.com/knikhil352000/React-Projects/tree/master/Covid-Tracker'} style={{backgroundColor: '#0390fc', margin: '10px'}}>Click Here</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nReactDOM.render(\r\n<App/>, document.getElementById('root'))\r\n"],"sourceRoot":""}